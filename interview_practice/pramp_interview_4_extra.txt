class point{
        int rowIndex;
        int colIndex;
        
        public point(int a, int b){
            this.rowIndex = a;
            this.colIndex = b;
        }
    }
    
    public void checkNeighbours( Queue<point> neighbours, int rows, int cols, int rowIndex, int colIndex ){
        if( ( rowIndex >= 0 ) && ( rowIndex < rows ) && ( colIndex >= 0 ) && ( colIndex < cols ) )  {
            neighbours.offer( new point( rowIndex, colIndex ) );
        }    
    }
    
    public void markIslands( char[][] grid, int rows, int cols, int rowIndex, int colIndex ){
        Queue<point> neighbours = new LinkedList<>();
        point temp = new point( rowIndex, colIndex);
        neighbours.offer(temp);
        while( !neighbours.isEmpty() ){
            point temp1 = neighbours.poll();
            int x = temp1.rowIndex;
            int y = temp1.colIndex;
            if( grid[x][y] == '1' ){
                grid[x][y] = '2';
                checkNeighbours( neighbours, rows, cols, x - 1, y );
                checkNeighbours( neighbours, rows, cols, x + 1, y );
                checkNeighbours( neighbours, rows, cols, x, y - 1 );
                checkNeighbours( neighbours, rows, cols, x, y + 1 );
            }
        }
        return;
    }
    
    public int numIslands(char[][] grid) {
        if( grid == null || grid.length == 0 ){
            return 0;
        }
        
        int islands = 0;
        int rows = grid.length, cols = grid[0].length;
        for( int i = 0; i < rows; i++ ){
            for( int j = 0; j < cols; j++ ){
                if( grid[i][j] == '1' ){
                    markIslands( grid, rows, cols, i, j );
                    islands++;
                }
            }
        }
        return islands;
    }